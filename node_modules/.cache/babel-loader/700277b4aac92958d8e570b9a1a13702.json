{"ast":null,"code":"var _jsxFileName = \"/home/invest/Front-End/rocketseat/React/ignote-desafio3-CriandoHook/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const newCart = [...cart];\n      const productExists = newCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        newCart.push(newProduct);\n      }\n\n      setCart(newCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const newCart = [...cart];\n      const productIndex = newCart.findIndex(product => product.id === productId);\n\n      if (productIndex >= 0) {\n        newCart.splice(productIndex, 1);\n        setCart(newCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n      } else {}\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async _ref2 => {\n    let {\n      productId,\n      amount\n    } = _ref2;\n\n    try {} catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"WanC+H4F5XAlaEUwRPGCePnR438=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/invest/Front-End/rocketseat/React/ignote-desafio3-CriandoHook/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","newCart","productExists","find","product","id","stock","get","stockAmount","data","amount","currentAmount","error","newProduct","push","setItem","stringify","removeProduct","productIndex","findIndex","splice","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { Product, Stock } from \"../types\";\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const newCart = [...cart];\n      const productExists = newCart.find((product) => product.id === productId);\n\n      const stock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n\n        const newProduct = {\n          ...product.data,\n          amount: 1,\n        };\n        newCart.push(newProduct);\n      }\n\n      setCart(newCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const newCart = [...cart];\n      const productIndex = newCart.findIndex(\n        (product) => product.id === productId\n      );\n\n      if (productIndex >= 0) {\n        newCart.splice(productIndex, 1);\n        setCart(newCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(newCart));\n      } else {\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}